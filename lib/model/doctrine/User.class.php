<?php

/**
 * User
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @package    tdf
 * @subpackage model
 * @author     Olmo Buining
 */
class User extends BaseUser
{
	public function matchPassword ($string) {		
		if ($string == $this->password) { 
			return true;
		} else {
			//echo 'Debug Users - Matchpassword:'. $string . '= '.$this->password;
			return false;	
		}
	}
	 
	public function getRegistrationDate(){
	
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'REG-DATE')
			->andWhere('e.user_id = ?', $this->id);
			
		$query = $q->fetchOne();
		if (!$query) {
			// Registerd before 1 july. Enter a invalid registration date.
			$extra = new Extra();
			$extra->user_id = $this->id;
			$extra->created_at = 1;
			$extra->value = 0;
			$extra->description = 'Voor 1 Juli geregistreerd';
			$extraType = Doctrine::getTable('ExtraType')->findOneByCode('REG-DATE');
			$extra->extra_type_id = $extraType->id;
			$extra->public = true;
			$extra->save();
			return $extra;
		} else {
			return $query;
		}
	}
	
	public function isActive(){
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'ACTIVE')
			->andWhere('e.user_id = ?', $this->id);
			
		$query = $q->fetchOne();
		if($query) {
			if( $query->value < time()-(60*60*24*30) ) {
				if($this->rank_id != 1) {
					$this->inactivate();
				}
				return false;
			} else {
				return true;
			}
		} else {
			if($this->rank_id != 1) {
				$this->inactivate();
			}
			$extra = new Extra();
			$extra->value = 1;
			$extra->created_at = time();
			$extra->updated_at = 1;
			$extra->description = "Activiteit check eerste keer aangemaakt.";
			$extra->public = true;
			$extra->User = $this;
			$extra->extra_type_id = 6;
			$extra->save();
			return false;
		}
	}
	
	public function inactivate() {
		if($this->permission_id != 11 && $this->permission_id != 10 && $this->permission_id != 9 && $this->permission_id != 8 ){
			$this->permission_id = 13;
		}
		if($this->rank_id != 4 && $this->rank_id != 3 && $this->rank_id != 2 && $this->rank_id != 10 ){
			$this->rank_id = 10;
		}
		$this->save();
	}
	
	public function getActivation(){
	
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'ACTIVE')
			->andWhere('e.user_id = ?', $this->id);
			
		$query = $q->fetchOne();
		return $query;
	}
	
	public function getTS3Token() {
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'TS3-TOKEN')
			->andWhere('e.user_id = ?', $this->id);
		 
		$query = $q->fetchOne();	
		if (!$query) {
			$ts3 = new ts3admin('ts.dutchfellowship.nl', 10011, 900);
			$connect = $ts3->connect();
			if($connect['success']) {
				$login = $ts3->login('serveradmin', 'oB4XwaCF');
				if($login['success']) {
					$select = $ts3->selectServer(9987);
					if($select['success']) {
						if ($this->Permission->level > 99) {
							$clientList = $ts3->tokenAdd(0, 6, 0, 'Token for website Admin users: this token for: '.$this->username);
						} elseif ($this->Permission->level > 9) {
							$clientList = $ts3->tokenAdd(0, 12, 0, 'Token for website Veteraan users: this token for: '.$this->username);
						} else {
							$clientList = $ts3->tokenAdd(0, 10, 0, 'Token for website registerd users: this token for: '.$this->username);
						}
						$token = $clientList['data']['token'];
						$extra = new Extra();
						$extra->description = $token;
						$extra->user_id = $this->id;
						$extra->created_at = time();
						$extra->extra_type_id = 1;
						$extra->public = true;
						$extra->save();
						return $extra;
					}  else {
						return false;	
					}
				}  else {
					return false;	
				}
			} else {
				return false;	
			}
		} else {
			return $query;	
		}
	}
	
	public function getLastLogin() {
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'LAST-ONL')
			->andWhere('e.user_id = ?', $this->id);
		 
		return $q->fetchOne();
	}
	
	public function isOfficer() {
		$q = Doctrine_Query::create()
			->from('Extra e')
			->innerJoin('e.ExtraType et')
			->where('et.code = ?', 'OFFICER')
			->andWhere('e.user_id = ?', $this->id);
		 
		return $q->fetchOne();
	}
	
	public function getMyCharacters(){
	
		$q = Doctrine_Query::create()
			->from('myCharacter c')
			->where('c.user_id = ?', $this->id)
			->orderBy('c.name');
			
		return $q->execute();
	}
}
