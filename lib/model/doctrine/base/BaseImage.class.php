<?php

/**
 * BaseImage
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property string $folder
 * @property string $src
 * @property string $title
 * @property string $text
 * @property integer $user_id
 * @property integer $created_at
 * @property User $User
 * @property Doctrine_Collection $Posts
 * @property Doctrine_Collection $Tags
 * @property Doctrine_Collection $ImageTypes
 * @property Doctrine_Collection $Albums
 * @property Doctrine_Collection $PostImage
 * @property Doctrine_Collection $ImageTag
 * @property Doctrine_Collection $Comments
 * @property Doctrine_Collection $ImageImageType
 * @property Doctrine_Collection $ImageAlbum
 * @property Doctrine_Collection $Extras
 * 
 * @method integer             getId()             Returns the current record's "id" value
 * @method string              getFolder()         Returns the current record's "folder" value
 * @method string              getSrc()            Returns the current record's "src" value
 * @method string              getTitle()          Returns the current record's "title" value
 * @method string              getText()           Returns the current record's "text" value
 * @method integer             getUserId()         Returns the current record's "user_id" value
 * @method integer             getCreatedAt()      Returns the current record's "created_at" value
 * @method User                getUser()           Returns the current record's "User" value
 * @method Doctrine_Collection getPosts()          Returns the current record's "Posts" collection
 * @method Doctrine_Collection getTags()           Returns the current record's "Tags" collection
 * @method Doctrine_Collection getImageTypes()     Returns the current record's "ImageTypes" collection
 * @method Doctrine_Collection getAlbums()         Returns the current record's "Albums" collection
 * @method Doctrine_Collection getPostImage()      Returns the current record's "PostImage" collection
 * @method Doctrine_Collection getImageTag()       Returns the current record's "ImageTag" collection
 * @method Doctrine_Collection getComments()       Returns the current record's "Comments" collection
 * @method Doctrine_Collection getImageImageType() Returns the current record's "ImageImageType" collection
 * @method Doctrine_Collection getImageAlbum()     Returns the current record's "ImageAlbum" collection
 * @method Doctrine_Collection getExtras()         Returns the current record's "Extras" collection
 * @method Image               setId()             Sets the current record's "id" value
 * @method Image               setFolder()         Sets the current record's "folder" value
 * @method Image               setSrc()            Sets the current record's "src" value
 * @method Image               setTitle()          Sets the current record's "title" value
 * @method Image               setText()           Sets the current record's "text" value
 * @method Image               setUserId()         Sets the current record's "user_id" value
 * @method Image               setCreatedAt()      Sets the current record's "created_at" value
 * @method Image               setUser()           Sets the current record's "User" value
 * @method Image               setPosts()          Sets the current record's "Posts" collection
 * @method Image               setTags()           Sets the current record's "Tags" collection
 * @method Image               setImageTypes()     Sets the current record's "ImageTypes" collection
 * @method Image               setAlbums()         Sets the current record's "Albums" collection
 * @method Image               setPostImage()      Sets the current record's "PostImage" collection
 * @method Image               setImageTag()       Sets the current record's "ImageTag" collection
 * @method Image               setComments()       Sets the current record's "Comments" collection
 * @method Image               setImageImageType() Sets the current record's "ImageImageType" collection
 * @method Image               setImageAlbum()     Sets the current record's "ImageAlbum" collection
 * @method Image               setExtras()         Sets the current record's "Extras" collection
 * 
 * @package    tdf
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseImage extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('image');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'unique' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('folder', 'string', 150, array(
             'unique' => true,
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('src', 'string', 150, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 150,
             ));
        $this->hasColumn('title', 'string', 80, array(
             'type' => 'string',
             'notnull' => true,
             'length' => 80,
             ));
        $this->hasColumn('text', 'string', null, array(
             'type' => 'string',
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('created_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasMany('Post as Posts', array(
             'refClass' => 'PostImage',
             'local' => 'image_id',
             'foreign' => 'post_id'));

        $this->hasMany('Tag as Tags', array(
             'refClass' => 'ImageTag',
             'local' => 'image_id',
             'foreign' => 'tag_id'));

        $this->hasMany('ImageType as ImageTypes', array(
             'refClass' => 'ImageImageType',
             'local' => 'image_id',
             'foreign' => 'image_type_id'));

        $this->hasMany('Album as Albums', array(
             'refClass' => 'ImageAlbum',
             'local' => 'image_id',
             'foreign' => 'album_id'));

        $this->hasMany('PostImage', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $this->hasMany('ImageTag', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $this->hasMany('Comment as Comments', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $this->hasMany('ImageImageType', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $this->hasMany('ImageAlbum', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $this->hasMany('Extra as Extras', array(
             'local' => 'id',
             'foreign' => 'image_id'));

        $sluggable0 = new Doctrine_Template_Sluggable(array(
             'fields' => 
             array(
              0 => 'title',
             ),
             'canUpdate' => true,
             ));
        $this->actAs($sluggable0);
    }
}