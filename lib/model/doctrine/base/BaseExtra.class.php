<?php

/**
 * BaseExtra
 * 
 * This class has been auto-generated by the Doctrine ORM Framework
 * 
 * @property integer $id
 * @property integer $value
 * @property integer $mycharacter_id
 * @property integer $extra_type_id
 * @property integer $user_id
 * @property integer $image_id
 * @property integer $event_id
 * @property clob $description
 * @property integer $created_at
 * @property integer $updated_at
 * @property boolean $public
 * @property myCharacter $myCharacter
 * @property User $User
 * @property Image $Image
 * @property Event $Event
 * @property ExtraType $ExtraType
 * 
 * @method integer     getId()             Returns the current record's "id" value
 * @method integer     getValue()          Returns the current record's "value" value
 * @method integer     getMycharacterId()  Returns the current record's "mycharacter_id" value
 * @method integer     getExtraTypeId()    Returns the current record's "extra_type_id" value
 * @method integer     getUserId()         Returns the current record's "user_id" value
 * @method integer     getImageId()        Returns the current record's "image_id" value
 * @method integer     getEventId()        Returns the current record's "event_id" value
 * @method clob        getDescription()    Returns the current record's "description" value
 * @method integer     getCreatedAt()      Returns the current record's "created_at" value
 * @method integer     getUpdatedAt()      Returns the current record's "updated_at" value
 * @method boolean     getPublic()         Returns the current record's "public" value
 * @method myCharacter getMyCharacter()    Returns the current record's "myCharacter" value
 * @method User        getUser()           Returns the current record's "User" value
 * @method Image       getImage()          Returns the current record's "Image" value
 * @method Event       getEvent()          Returns the current record's "Event" value
 * @method ExtraType   getExtraType()      Returns the current record's "ExtraType" value
 * @method Extra       setId()             Sets the current record's "id" value
 * @method Extra       setValue()          Sets the current record's "value" value
 * @method Extra       setMycharacterId()  Sets the current record's "mycharacter_id" value
 * @method Extra       setExtraTypeId()    Sets the current record's "extra_type_id" value
 * @method Extra       setUserId()         Sets the current record's "user_id" value
 * @method Extra       setImageId()        Sets the current record's "image_id" value
 * @method Extra       setEventId()        Sets the current record's "event_id" value
 * @method Extra       setDescription()    Sets the current record's "description" value
 * @method Extra       setCreatedAt()      Sets the current record's "created_at" value
 * @method Extra       setUpdatedAt()      Sets the current record's "updated_at" value
 * @method Extra       setPublic()         Sets the current record's "public" value
 * @method Extra       setMyCharacter()    Sets the current record's "myCharacter" value
 * @method Extra       setUser()           Sets the current record's "User" value
 * @method Extra       setImage()          Sets the current record's "Image" value
 * @method Extra       setEvent()          Sets the current record's "Event" value
 * @method Extra       setExtraType()      Sets the current record's "ExtraType" value
 * 
 * @package    tdf
 * @subpackage model
 * @author     Your name here
 * @version    SVN: $Id: Builder.php 7490 2010-03-29 19:53:27Z jwage $
 */
abstract class BaseExtra extends sfDoctrineRecord
{
    public function setTableDefinition()
    {
        $this->setTableName('extra');
        $this->hasColumn('id', 'integer', null, array(
             'primary' => true,
             'unique' => true,
             'type' => 'integer',
             'autoincrement' => true,
             ));
        $this->hasColumn('value', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('mycharacter_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('extra_type_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('user_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('image_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('event_id', 'integer', null, array(
             'type' => 'integer',
             'notnull' => false,
             ));
        $this->hasColumn('description', 'clob', null, array(
             'type' => 'clob',
             'notnull' => false,
             ));
        $this->hasColumn('created_at', 'integer', null, array(
             'type' => 'integer',
             'notnull' => true,
             ));
        $this->hasColumn('updated_at', 'integer', null, array(
             'type' => 'integer',
             ));
        $this->hasColumn('public', 'boolean', null, array(
             'type' => 'boolean',
             'notnull' => true,
             ));
    }

    public function setUp()
    {
        parent::setUp();
        $this->hasOne('myCharacter', array(
             'local' => 'mycharacter_id',
             'foreign' => 'id'));

        $this->hasOne('User', array(
             'local' => 'user_id',
             'foreign' => 'id'));

        $this->hasOne('Image', array(
             'local' => 'image_id',
             'foreign' => 'id'));

        $this->hasOne('Event', array(
             'local' => 'event_id',
             'foreign' => 'id'));

        $this->hasOne('ExtraType', array(
             'local' => 'extra_type_id',
             'foreign' => 'id'));
    }
}